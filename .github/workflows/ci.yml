name: "CI pipeline to build and publish lambda docker images to ecr"

on:
  workflow_dispatch:
    inputs:
      publish_noter:
        description: 'Publish noter to s3'
        required: true
        default: 'true'
      publish_lambda:
        description: 'Publish lambda to ecr'
        required: true
        default: 'false'
      api_gateway_url:
        description: 'API URL'
        required: true
        default: 'https://xx4gdonbrk.execute-api.us-east-1.amazonaws.com/initial'
      bucket_name:
        description: 'S3 bucket name for frontend deployment'
        required: false
        default: 'my-noter-bucket'
        
env:
  AWS_REGION: "us-east-1"  # Replace with your AWS region
  IMAGE_TAG: "latest"

jobs:
  build-noter-publish:
    if: ${{ inputs.publish_noter == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: setup nodejs18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: install dependencies
        run: npm install
      - name: build
        run: |
          export REACT_APP_API_URL=${{ inputs.api_gateway_url }}
          export CI=false
          npm run build
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: publish to s3
        run: |
          export BUCKET_NAME="${{ inputs.bucket_name }}"
          if ! aws s3 ls s3://$BUCKET_NAME 2>&1 > /dev/null; then
            echo "Creating bucket $BUCKET_NAME..."
            aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }}
          fi
          echo "Syncing build files to S3..."
          aws s3 sync build/ s3://$BUCKET_NAME/ --delete
          echo "Setting S3 website configuration..."
          aws s3 website s3://$BUCKET_NAME/ --index-document index.html --error-document index.html
          echo "Website deployed to http://$BUCKET_NAME.s3-website-${{ env.AWS_REGION }}.amazonaws.com/"

      
  build-and-push:
    if: ${{ inputs.publish_lambda == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: getallnotes
            path: GetAllNotes
          - name: createnote
            path: CreateNote
          - name: deletenote
            path: DeleteNote
          - name: notebyid
            path: NoteById
          - name: updatenote
            path: UpdateNote
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names noter/${{ matrix.service.name }} || \
          aws ecr create-repository --repository-name noter/${{ matrix.service.name }}

      - name: Build, tag, and push ${{ matrix.service.name }} image to Amazon ECR
        id: build-image
        run: |
          cd ./aws_codes/${{ matrix.service.path }}
          docker build -t noter/${{ matrix.service.name }}:${{ env.IMAGE_TAG }} .
          docker tag noter/${{ matrix.service.name }}:${{ env.IMAGE_TAG }} ${{ steps.login.outputs.registry }}/noter/${{ matrix.service.name }}:${{ env.IMAGE_TAG }}
          docker push ${{ steps.login.outputs.registry }}/noter/${{ matrix.service.name }}:${{ env.IMAGE_TAG }}
